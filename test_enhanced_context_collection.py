#!/usr/bin/env python3
"""
Test for enhanced element context collection (Task 2).
Validates context collection functionality and performance monitoring.
"""

import os
import sys
import time
from pathlib import Path

# Add current directory to path for imports
sys.path.insert(0, str(Path(__file__).parent))

def test_context_collection_implementation():
    """Test that the enhanced context collection code was properly added to session.py."""
    print("üß™ Testing enhanced context collection implementation...")

    try:
        with open('browser/session.py', 'r', encoding='utf-8') as f:
            content = f.read()

        # Check for _get_nearby_elements method
        required_patterns = [
            "async def _get_nearby_elements(self, target_element_handle, page, radius_px: int = 100, max_elements: int = 5) -> dict:",
            "nearby_elements",
            "element_context",
            "collection_time_ms",
            "context.collection.time_ms",
            "context.nearby_elements.count"
        ]

        # Check for enhanced click context collection
        click_patterns = [
            "STEALTH_BEHAVIORAL_PLANNING",
            "enhanced_context = await self._get_nearby_elements(element_handle, page)",
            "stealth.click.context_collected",
            "behavioral_planning"
        ]

        # Check for enhanced typing context collection
        typing_patterns = [
            "_perform_stealth_typing(self, page, element_handle, text: str, context: dict = None)",
            "stealth.type.context_collected",
            "stealth.type.context_not_supported"
        ]

        # Check for new stealth counters
        counter_patterns = [
            "stealth.click.context_collected",
            "stealth.type.context_collected",
            "stealth.type.context_not_supported"
        ]

        all_patterns = required_patterns + click_patterns + typing_patterns + counter_patterns
        missing_patterns = []

        for pattern in all_patterns:
            if pattern not in content:
                missing_patterns.append(pattern)

        if missing_patterns:
            print(f"‚ùå Missing patterns: {missing_patterns}")
            return False

        print("‚úÖ All required code patterns found in session.py")
        return True

    except Exception as e:
        print(f"‚ùå Error reading session.py: {e}")
        return False


def test_environment_variable_integration():
    """Test that the context collection integrates with Task 1's environment variables."""
    print("üß™ Testing environment variable integration...")

    # Test environment variable parsing for STEALTH_BEHAVIORAL_PLANNING
    test_cases = [
        ('true', True),
        ('TRUE', True),
        ('false', False),
        ('FALSE', False),
        ('invalid', False),
        ('', False)
    ]

    for env_value, expected in test_cases:
        # Mock environment variable
        if env_value:
            os.environ['STEALTH_BEHAVIORAL_PLANNING'] = env_value
        elif 'STEALTH_BEHAVIORAL_PLANNING' in os.environ:
            del os.environ['STEALTH_BEHAVIORAL_PLANNING']

        # Test parsing logic
        behavioral_planning_enabled = os.environ.get('STEALTH_BEHAVIORAL_PLANNING', 'false').lower() == 'true'

        if behavioral_planning_enabled != expected:
            print(f"‚ùå Environment variable parsing failed for '{env_value}': expected {expected}, got {behavioral_planning_enabled}")
            return False

    # Clean up
    if 'STEALTH_BEHAVIORAL_PLANNING' in os.environ:
        del os.environ['STEALTH_BEHAVIORAL_PLANNING']

    print("‚úÖ Environment variable integration works correctly")
    return True


def test_context_structure():
    """Test the expected structure of context dictionaries."""
    print("üß™ Testing context structure...")

    # Test the context structure that _get_nearby_elements should return
    expected_context_keys = [
        "nearby_elements",
        "page_title",
        "element_context",
        "collection_time_ms"
    ]

    expected_element_context_keys = [
        "tag",
        "type",
        "id",
        "className",
        "role",
        "ariaLabel"
    ]

    expected_nearby_element_keys = [
        "tag",
        "type",
        "text",
        "distance",
        "role"
    ]

    print(f"‚úÖ Expected context structure includes: {expected_context_keys}")
    print(f"‚úÖ Expected element context includes: {expected_element_context_keys}")
    print(f"‚úÖ Expected nearby elements include: {expected_nearby_element_keys}")

    return True


def test_performance_monitoring():
    """Test that performance monitoring is properly implemented."""
    print("üß™ Testing performance monitoring...")

    try:
        with open('browser/session.py', 'r', encoding='utf-8') as f:
            content = f.read()

        # Check for performance monitoring patterns
        monitoring_patterns = [
            "import time",
            "start_time = time.time()",
            "collection_time_ms",
            "context.collection.time_ms",
            "context.nearby_elements.count",
            "stealth.click.context_collected += 1",
            "stealth.type.context_collected += 1"
        ]

        for pattern in monitoring_patterns:
            if pattern not in content:
                print(f"‚ùå Missing monitoring pattern: {pattern}")
                return False

        print("‚úÖ Performance monitoring is properly implemented")
        return True

    except Exception as e:
        print(f"‚ùå Error checking performance monitoring: {e}")
        return False


def test_error_handling():
    """Test that proper error handling is implemented."""
    print("üß™ Testing error handling...")

    try:
        with open('browser/session.py', 'r', encoding='utf-8') as f:
            content = f.read()

        # Check for error handling patterns
        error_patterns = [
            "except Exception as context_e:",
            "Context collection failed",
            'context["behavioral_planning"] = False',
            "except TypeError:",
            "context_not_supported"
        ]

        for pattern in error_patterns:
            if pattern not in content:
                print(f"‚ùå Missing error handling pattern: {pattern}")
                return False

        print("‚úÖ Error handling is properly implemented")
        return True

    except Exception as e:
        print(f"‚ùå Error checking error handling: {e}")
        return False


def test_rollback_safety():
    """Test that rollback mechanisms are safe and effective."""
    print("üß™ Testing rollback safety...")

    # Test that context collection is only enabled when environment variable is set
    os.environ['STEALTH_BEHAVIORAL_PLANNING'] = 'false'
    behavioral_planning_disabled = os.environ.get('STEALTH_BEHAVIORAL_PLANNING', 'false').lower() != 'true'

    if not behavioral_planning_disabled:
        print("‚ùå Context collection should be disabled when STEALTH_BEHAVIORAL_PLANNING=false")
        return False

    # Clean up
    del os.environ['STEALTH_BEHAVIORAL_PLANNING']

    print("‚úÖ Rollback safety confirmed - context collection disabled by default")
    return True


def main():
    """Run the enhanced element context collection test."""
    print("üöÄ Starting enhanced element context collection test (Task 2)...")
    print("=" * 70)

    tests = [
        test_context_collection_implementation,
        test_environment_variable_integration,
        test_context_structure,
        test_performance_monitoring,
        test_error_handling,
        test_rollback_safety
    ]

    results = []
    for test in tests:
        try:
            result = test()
            results.append(result)
        except Exception as e:
            print(f"‚ùå Test {test.__name__} failed with exception: {e}")
            results.append(False)
        print()

    print("=" * 70)
    if all(results):
        print("üéâ Enhanced element context collection test PASSED!")
        print("‚úÖ _get_nearby_elements() method properly implemented")
        print("‚úÖ _click_element_node() enhanced with context collection")
        print("‚úÖ _input_text_element_node() enhanced with context collection")
        print("‚úÖ Performance monitoring hooks added")
        print("‚úÖ Environment variable integration working")
        print("‚úÖ Error handling and rollback safety confirmed")
        print("‚úÖ Ready for behavioral planning features to consume enriched context")
    else:
        print("‚ùå Enhanced element context collection test FAILED!")
        failed_tests = [tests[i].__name__ for i, result in enumerate(results) if not result]
        print(f"‚ùå Failed tests: {failed_tests}")

    return all(results)


if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1)
